{"version":3,"sources":["Components/Chart/Chart.js","Components/Cards/Cards.js","data.js","Components/CountryPicker/CountryPicker.js","Components/UI/Spinner.js","App.js","index.js"],"names":["Chart","selectedCountryDailyData","dataNotFound","length","data","labels","map","sec","Date","toDateString","datasets","Confirmed","label","borderColor","fill","Deaths","backgroundColor","height","Cards","selectedCountryLatestData","className","Recovered","availableContries","Country","Slug","ISO2","CountryPicker","selectInputHandler","selectedCountry","defaultValue","onChange","event","country","value","key","Spinner","App","state","loading","getContryData","contryName","isExist","find","el","setState","err","axios","get","then","res","getContryDailyData","catch","target","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffd03c43.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst Chart = ({ selectedCountryDailyData, dataNotFound }) => {\r\n  return (\r\n    <Fragment>\r\n      {selectedCountryDailyData.length > 0 ? (\r\n        <Line\r\n          data={{\r\n            labels: !dataNotFound\r\n              ? selectedCountryDailyData.map(sec =>\r\n                  new Date(sec.Date).toDateString()\r\n                )\r\n              : null,\r\n            datasets: [\r\n              {\r\n                data: !dataNotFound\r\n                  ? selectedCountryDailyData.map(sec => sec.Confirmed)\r\n                  : null,\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true\r\n              },\r\n              {\r\n                data: !dataNotFound\r\n                  ? selectedCountryDailyData.map(sec => sec.Deaths)\r\n                  : null,\r\n                label: 'Deaths',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                fill: true\r\n              }\r\n            ]\r\n          }}\r\n          height={100}\r\n        />\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n};\r\nChart.propTypes = {\r\n  selectedCountryDailyData: PropTypes.array,\r\n  dataNotFound: PropTypes.bool.isRequired\r\n};\r\nexport default Chart;\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Cards = ({ selectedCountryLatestData, dataNotFound }) => {\r\n  return (\r\n    <Fragment>\r\n      {selectedCountryLatestData ? (\r\n        <div className='container text-center'>\r\n          <div className='row'>\r\n            <div className='col-md-4 card-body'>\r\n              <div className='card'>\r\n                <div className='card-body'>\r\n                  <p className='card-title display-5 text-warning'>Confirmed</p>\r\n                  <p className='card-title display-6 text-muted '>\r\n                    {!dataNotFound ? (\r\n                      selectedCountryLatestData.Confirmed\r\n                    ) : (\r\n                      <small className='text-danger'>Not Available</small>\r\n                    )}\r\n                  </p>\r\n                  <small className='text-muted'>\r\n                    {selectedCountryLatestData.Date}\r\n                  </small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='col-md-4 card-body'>\r\n              <div className='card'>\r\n                <div className='card-body'>\r\n                  <p className='card-title display-5 text-danger'>Deaths</p>\r\n                  <p className='card-title display-6 text-muted '>\r\n                    {!dataNotFound ? (\r\n                      selectedCountryLatestData.Deaths\r\n                    ) : (\r\n                      <small className='text-danger'>Not Available</small>\r\n                    )}\r\n                  </p>\r\n                  <small className='text-muted'>\r\n                    {selectedCountryLatestData.Date}\r\n                  </small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='col-md-4 card-body'>\r\n              <div className='card'>\r\n                <div className='card-body'>\r\n                  <p className='card-title display-5 text-success'>Recovered</p>\r\n                  <p className='card-title display-6 text-muted '>\r\n                    {!dataNotFound ? (\r\n                      selectedCountryLatestData.Recovered\r\n                    ) : (\r\n                      <small className='text-danger'>Not Available</small>\r\n                    )}\r\n                  </p>\r\n                  <small className='text-muted'>\r\n                    {selectedCountryLatestData.Date}\r\n                  </small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n};\r\nCards.propTypes = {\r\n  dataNotFound: PropTypes.bool.isRequired\r\n};\r\nexport default Cards;\r\n","export const availableContries = [\r\n  { Country: 'Macao, SAR China', Slug: 'macao-sar-china', ISO2: 'MO' },\r\n  { Country: 'Oman', Slug: 'oman', ISO2: 'OM' },\r\n  { Country: 'China', Slug: 'china', ISO2: 'CN' },\r\n  { Country: 'Kazakhstan', Slug: 'kazakhstan', ISO2: 'KZ' },\r\n  { Country: 'Niger', Slug: 'niger', ISO2: 'NE' },\r\n  { Country: 'Virgin Islands, US', Slug: 'virgin-islands', ISO2: 'VI' },\r\n  { Country: 'Afghanistan', Slug: 'afghanistan', ISO2: 'AF' },\r\n  { Country: 'Ireland', Slug: 'ireland', ISO2: 'IE' },\r\n  { Country: 'Korea (South)', Slug: 'korea-south', ISO2: 'KR' },\r\n  { Country: 'Nicaragua', Slug: 'nicaragua', ISO2: 'NI' },\r\n  { Country: 'Russian Federation', Slug: 'russia', ISO2: 'RU' },\r\n  { Country: 'Viet Nam', Slug: 'vietnam', ISO2: 'VN' },\r\n  { Country: 'Japan', Slug: 'japan', ISO2: 'JP' },\r\n  { Country: 'Slovenia', Slug: 'slovenia', ISO2: 'SI' },\r\n  { Country: 'Isle of Man', Slug: 'isle-of-man', ISO2: 'IM' },\r\n  { Country: 'Luxembourg', Slug: 'luxembourg', ISO2: 'LU' },\r\n  { Country: 'Malawi', Slug: 'malawi', ISO2: 'MW' },\r\n  {\r\n    Country: 'South Georgia and the South Sandwich Islands',\r\n    Slug: 'south-georgia-and-the-south-sandwich-islands',\r\n    ISO2: 'GS'\r\n  },\r\n  { Country: 'Sudan', Slug: 'sudan', ISO2: 'SD' },\r\n  { Country: 'Gabon', Slug: 'gabon', ISO2: 'GA' },\r\n  { Country: 'Equatorial Guinea', Slug: 'equatorial-guinea', ISO2: 'GQ' },\r\n  { Country: 'Georgia', Slug: 'georgia', ISO2: 'GE' },\r\n  { Country: 'Republic of Kosovo', Slug: 'kosovo', ISO2: 'XK' },\r\n  { Country: 'United Arab Emirates', Slug: 'united-arab-emirates', ISO2: 'AE' },\r\n  { Country: 'Botswana', Slug: 'botswana', ISO2: 'BW' },\r\n  { Country: 'Martinique', Slug: 'martinique', ISO2: 'MQ' },\r\n  { Country: 'Saint-Barthélemy', Slug: 'saint-barthélemy', ISO2: 'BL' },\r\n  { Country: 'Uruguay', Slug: 'uruguay', ISO2: 'UY' },\r\n  { Country: 'Vanuatu', Slug: 'vanuatu', ISO2: 'VU' },\r\n  { Country: 'Albania', Slug: 'albania', ISO2: 'AL' },\r\n  { Country: 'French Polynesia', Slug: 'french-polynesia', ISO2: 'PF' },\r\n  { Country: 'Cayman Islands', Slug: 'cayman-islands', ISO2: 'KY' },\r\n  { Country: 'Dominican Republic', Slug: 'dominican-republic', ISO2: 'DO' },\r\n  { Country: 'Papua New Guinea', Slug: 'papua-new-guinea', ISO2: 'PG' },\r\n  { Country: 'Armenia', Slug: 'armenia', ISO2: 'AM' },\r\n  { Country: 'Tunisia', Slug: 'tunisia', ISO2: 'TN' },\r\n  { Country: 'Anguilla', Slug: 'anguilla', ISO2: 'AI' },\r\n  { Country: 'Bahrain', Slug: 'bahrain', ISO2: 'BH' },\r\n  { Country: 'Comoros', Slug: 'comoros', ISO2: 'KM' },\r\n  { Country: 'Gambia', Slug: 'gambia', ISO2: 'GM' },\r\n  { Country: 'Moldova', Slug: 'moldova', ISO2: 'MD' },\r\n  { Country: 'New Zealand', Slug: 'new-zealand', ISO2: 'NZ' },\r\n  {\r\n    Country: 'Wallis and Futuna Islands',\r\n    Slug: 'wallis-and-futuna-islands',\r\n    ISO2: 'WF'\r\n  },\r\n  { Country: 'Bangladesh', Slug: 'bangladesh', ISO2: 'BD' },\r\n  { Country: 'Bermuda', Slug: 'bermuda', ISO2: 'BM' },\r\n  { Country: 'Cameroon', Slug: 'cameroon', ISO2: 'CM' },\r\n  { Country: 'El Salvador', Slug: 'el-salvador', ISO2: 'SV' },\r\n  { Country: 'Guam', Slug: 'guam', ISO2: 'GU' },\r\n  { Country: 'Hungary', Slug: 'hungary', ISO2: 'HU' },\r\n  { Country: 'Kuwait', Slug: 'kuwait', ISO2: 'KW' },\r\n  { Country: 'Puerto Rico', Slug: 'puerto-rico', ISO2: 'PR' },\r\n  { Country: 'South Africa', Slug: 'south-africa', ISO2: 'ZA' },\r\n  { Country: 'Turkmenistan', Slug: 'turkmenistan', ISO2: 'TM' },\r\n  { Country: 'Egypt', Slug: 'egypt', ISO2: 'EG' },\r\n  { Country: 'Iraq', Slug: 'iraq', ISO2: 'IQ' },\r\n  { Country: 'Serbia', Slug: 'serbia', ISO2: 'RS' },\r\n  { Country: 'Ukraine', Slug: 'ukraine', ISO2: 'UA' },\r\n  { Country: 'Austria', Slug: 'austria', ISO2: 'AT' },\r\n  { Country: 'Latvia', Slug: 'latvia', ISO2: 'LV' },\r\n  { Country: 'Norfolk Island', Slug: 'norfolk-island', ISO2: 'NF' },\r\n  { Country: 'Senegal', Slug: 'senegal', ISO2: 'SN' },\r\n  { Country: 'Zambia', Slug: 'zambia', ISO2: 'ZM' },\r\n  { Country: 'Christmas Island', Slug: 'christmas-island', ISO2: 'CX' },\r\n  { Country: 'Kyrgyzstan', Slug: 'kyrgyzstan', ISO2: 'KG' },\r\n  { Country: 'Panama', Slug: 'panama', ISO2: 'PA' },\r\n  { Country: 'Qatar', Slug: 'qatar', ISO2: 'QA' },\r\n  { Country: 'Tonga', Slug: 'tonga', ISO2: 'TO' },\r\n  { Country: 'Yemen', Slug: 'yemen', ISO2: 'YE' },\r\n  { Country: 'Cape Verde', Slug: 'cape-verde', ISO2: 'CV' },\r\n  { Country: 'Lebanon', Slug: 'lebanon', ISO2: 'LB' },\r\n  { Country: 'Bhutan', Slug: 'bhutan', ISO2: 'BT' },\r\n  { Country: 'Malaysia', Slug: 'malaysia', ISO2: 'MY' },\r\n  { Country: 'Jamaica', Slug: 'jamaica', ISO2: 'JM' },\r\n  {\r\n    Country: 'Saint Vincent and Grenadines',\r\n    Slug: 'saint-vincent-and-the-grenadines',\r\n    ISO2: 'VC'\r\n  },\r\n  { Country: 'Tanzania, United Republic of', Slug: 'tanzania', ISO2: 'TZ' },\r\n  { Country: 'Eritrea', Slug: 'eritrea', ISO2: 'ER' },\r\n  {\r\n    Country: 'French Southern Territories',\r\n    Slug: 'french-southern-territories',\r\n    ISO2: 'TF'\r\n  },\r\n  { Country: 'Djibouti', Slug: 'djibouti', ISO2: 'DJ' },\r\n  { Country: 'Guinea-Bissau', Slug: 'guinea-bissau', ISO2: 'GW' },\r\n  { Country: 'Samoa', Slug: 'samoa', ISO2: 'WS' },\r\n  { Country: 'Benin', Slug: 'benin', ISO2: 'BJ' },\r\n  { Country: 'Bouvet Island', Slug: 'bouvet-island', ISO2: 'BV' },\r\n  { Country: 'Nepal', Slug: 'nepal', ISO2: 'NP' },\r\n  { Country: 'Cambodia', Slug: 'cambodia', ISO2: 'KH' },\r\n  { Country: 'Portugal', Slug: 'portugal', ISO2: 'PT' },\r\n  { Country: 'Angola', Slug: 'angola', ISO2: 'AO' },\r\n  { Country: 'Colombia', Slug: 'colombia', ISO2: 'CO' },\r\n  { Country: 'Trinidad and Tobago', Slug: 'trinidad-and-tobago', ISO2: 'TT' },\r\n  { Country: 'Guinea', Slug: 'guinea', ISO2: 'GN' },\r\n  { Country: 'Israel', Slug: 'israel', ISO2: 'IL' },\r\n  { Country: 'Jordan', Slug: 'jordan', ISO2: 'JO' },\r\n  { Country: 'Estonia', Slug: 'estonia', ISO2: 'EE' },\r\n  { Country: 'France', Slug: 'france', ISO2: 'FR' },\r\n  { Country: 'Brunei Darussalam', Slug: 'brunei', ISO2: 'BN' },\r\n  { Country: 'Czech Republic', Slug: 'czech-republic', ISO2: 'CZ' },\r\n  { Country: 'Indonesia', Slug: 'indonesia', ISO2: 'ID' },\r\n  { Country: 'Philippines', Slug: 'philippines', ISO2: 'PH' },\r\n  { Country: 'Belgium', Slug: 'belgium', ISO2: 'BE' },\r\n  { Country: 'Antigua and Barbuda', Slug: 'antigua-and-barbuda', ISO2: 'AG' },\r\n  { Country: 'Guernsey', Slug: 'guernsey', ISO2: 'GG' },\r\n  { Country: 'Iran, Islamic Republic of', Slug: 'iran', ISO2: 'IR' },\r\n  { Country: 'Jersey', Slug: 'jersey', ISO2: 'JE' },\r\n  { Country: 'Liechtenstein', Slug: 'liechtenstein', ISO2: 'LI' },\r\n  { Country: 'Norway', Slug: 'norway', ISO2: 'NO' },\r\n  { Country: 'Mongolia', Slug: 'mongolia', ISO2: 'MN' },\r\n  { Country: 'Montserrat', Slug: 'montserrat', ISO2: 'MS' },\r\n  { Country: 'Rwanda', Slug: 'rwanda', ISO2: 'RW' },\r\n  { Country: 'Réunion', Slug: 'réunion', ISO2: 'RE' },\r\n  {\r\n    Country: 'Saint Kitts and Nevis',\r\n    Slug: 'saint-kitts-and-nevis',\r\n    ISO2: 'KN'\r\n  },\r\n  { Country: 'Togo', Slug: 'togo', ISO2: 'TG' },\r\n  { Country: 'Ecuador', Slug: 'ecuador', ISO2: 'EC' },\r\n  { Country: 'Lithuania', Slug: 'lithuania', ISO2: 'LT' },\r\n  { Country: 'Turkey', Slug: 'turkey', ISO2: 'TR' },\r\n  { Country: 'New Caledonia', Slug: 'new-caledonia', ISO2: 'NC' },\r\n  { Country: 'Algeria', Slug: 'algeria', ISO2: 'DZ' },\r\n  { Country: 'Denmark', Slug: 'denmark', ISO2: 'DK' },\r\n  { Country: 'Finland', Slug: 'finland', ISO2: 'FI' },\r\n  { Country: 'Ghana', Slug: 'ghana', ISO2: 'GH' },\r\n  { Country: 'Peru', Slug: 'peru', ISO2: 'PE' },\r\n  { Country: 'San Marino', Slug: 'san-marino', ISO2: 'SM' },\r\n  { Country: 'Timor-Leste', Slug: 'timor-leste', ISO2: 'TL' },\r\n  { Country: 'Netherlands', Slug: 'netherlands', ISO2: 'NL' },\r\n  { Country: 'Cuba', Slug: 'cuba', ISO2: 'CU' },\r\n  { Country: 'Iceland', Slug: 'iceland', ISO2: 'IS' },\r\n  { Country: 'Burkina Faso', Slug: 'burkina-faso', ISO2: 'BF' },\r\n  { Country: 'Macedonia, Republic of', Slug: 'macedonia', ISO2: 'MK' },\r\n  { Country: 'Maldives', Slug: 'maldives', ISO2: 'MV' },\r\n  { Country: 'Myanmar', Slug: 'myanmar', ISO2: 'MM' },\r\n  { Country: 'Spain', Slug: 'spain', ISO2: 'ES' },\r\n  { Country: 'Uzbekistan', Slug: 'uzbekistan', ISO2: 'UZ' },\r\n  { Country: 'Palau', Slug: 'palau', ISO2: 'PW' },\r\n  { Country: 'Syrian Arab Republic (Syria)', Slug: 'syria', ISO2: 'SY' },\r\n  { Country: 'Bahamas', Slug: 'bahamas', ISO2: 'BS' },\r\n  { Country: 'Andorra', Slug: 'andorra', ISO2: 'AD' },\r\n  { Country: 'Korea (North)', Slug: 'korea-north', ISO2: 'KP' },\r\n  { Country: 'Saint Lucia', Slug: 'saint-lucia', ISO2: 'LC' },\r\n  { Country: 'Aruba', Slug: 'aruba', ISO2: 'AW' },\r\n  { Country: 'Italy', Slug: 'italy', ISO2: 'IT' },\r\n  { Country: 'Paraguay', Slug: 'paraguay', ISO2: 'PY' },\r\n  { Country: 'Sri Lanka', Slug: 'sri-lanka', ISO2: 'LK' },\r\n  { Country: 'ALA Aland Islands', Slug: 'ala-aland-islands', ISO2: 'AX' },\r\n  { Country: 'Pitcairn', Slug: 'pitcairn', ISO2: 'PN' },\r\n  { Country: 'Argentina', Slug: 'argentina', ISO2: 'AR' },\r\n  {\r\n    Country: 'Heard and Mcdonald Islands',\r\n    Slug: 'heard-and-mcdonald-islands',\r\n    ISO2: 'HM'\r\n  },\r\n  { Country: 'Liberia', Slug: 'liberia', ISO2: 'LR' },\r\n  { Country: 'Germany', Slug: 'germany', ISO2: 'DE' },\r\n  { Country: 'Solomon Islands', Slug: 'solomon-islands', ISO2: 'SB' },\r\n  { Country: 'Tajikistan', Slug: 'tajikistan', ISO2: 'TJ' },\r\n  { Country: 'Croatia', Slug: 'croatia', ISO2: 'HR' },\r\n  { Country: 'Romania', Slug: 'romania', ISO2: 'RO' },\r\n  { Country: 'Mauritius', Slug: 'mauritius', ISO2: 'MU' },\r\n  {\r\n    Country: 'Northern Mariana Islands',\r\n    Slug: 'northern-mariana-islands',\r\n    ISO2: 'MP'\r\n  },\r\n  { Country: 'Ethiopia', Slug: 'ethiopia', ISO2: 'ET' },\r\n  { Country: 'Mali', Slug: 'mali', ISO2: 'ML' },\r\n  { Country: 'Tuvalu', Slug: 'tuvalu', ISO2: 'TV' },\r\n  { Country: 'Venezuela (Bolivarian Republic)', Slug: 'venezuela', ISO2: 'VE' },\r\n  { Country: 'Zimbabwe', Slug: 'zimbabwe', ISO2: 'ZW' },\r\n  {\r\n    Country: 'British Virgin Islands',\r\n    Slug: 'british-virgin-islands',\r\n    ISO2: 'VG'\r\n  },\r\n  { Country: \"Côte d'Ivoire\", Slug: 'cote-divoire', ISO2: 'CI' },\r\n  { Country: 'Kiribati', Slug: 'kiribati', ISO2: 'KI' },\r\n  {\r\n    Country: 'Sao Tome and Principe',\r\n    Slug: 'sao-tome-and-principe',\r\n    ISO2: 'ST'\r\n  },\r\n  { Country: 'Slovakia', Slug: 'slovakia', ISO2: 'SK' },\r\n  { Country: 'Congo (Brazzaville)', Slug: 'congo-brazzaville', ISO2: 'CG' },\r\n  { Country: 'Guadeloupe', Slug: 'guadeloupe', ISO2: 'GP' },\r\n  {\r\n    Country: 'Central African Republic',\r\n    Slug: 'central-african-republic',\r\n    ISO2: 'CF'\r\n  },\r\n  { Country: 'Costa Rica', Slug: 'costa-rica', ISO2: 'CR' },\r\n  { Country: 'Greece', Slug: 'greece', ISO2: 'GR' },\r\n  { Country: 'Guyana', Slug: 'guyana', ISO2: 'GY' },\r\n  { Country: 'Belarus', Slug: 'belarus', ISO2: 'BY' },\r\n  { Country: 'Grenada', Slug: 'grenada', ISO2: 'GD' },\r\n  { Country: 'India', Slug: 'india', ISO2: 'IN' },\r\n  { Country: 'Uganda', Slug: 'uganda', ISO2: 'UG' },\r\n  { Country: 'Azerbaijan', Slug: 'azerbaijan', ISO2: 'AZ' },\r\n  { Country: 'Somalia', Slug: 'somalia', ISO2: 'SO' },\r\n  { Country: 'United States of America', Slug: 'united-states', ISO2: 'US' },\r\n  {\r\n    Country: 'US Minor Outlying Islands',\r\n    Slug: 'us-minor-outlying-islands',\r\n    ISO2: 'UM'\r\n  },\r\n  { Country: 'American Samoa', Slug: 'american-samoa', ISO2: 'AS' },\r\n  { Country: 'Monaco', Slug: 'monaco', ISO2: 'MC' },\r\n  {\r\n    Country: 'Bosnia and Herzegovina',\r\n    Slug: 'bosnia-and-herzegovina',\r\n    ISO2: 'BA'\r\n  },\r\n  {\r\n    Country: 'Saint-Martin (French part)',\r\n    Slug: 'saint-martin-french-part',\r\n    ISO2: 'MF'\r\n  },\r\n  { Country: 'Swaziland', Slug: 'swaziland', ISO2: 'SZ' },\r\n  { Country: 'South Sudan', Slug: 'south-sudan', ISO2: 'SS' },\r\n  { Country: 'Chad', Slug: 'chad', ISO2: 'TD' },\r\n  { Country: 'Nigeria', Slug: 'nigeria', ISO2: 'NG' },\r\n  { Country: 'Fiji', Slug: 'fiji', ISO2: 'FJ' },\r\n  { Country: 'Saudi Arabia', Slug: 'saudi-arabia', ISO2: 'SA' },\r\n  { Country: 'Western Sahara', Slug: 'western-sahara', ISO2: 'EH' },\r\n  {\r\n    Country: 'British Indian Ocean Territory',\r\n    Slug: 'british-indian-ocean-territory',\r\n    ISO2: 'IO'\r\n  },\r\n  { Country: 'Madagascar', Slug: 'madagascar', ISO2: 'MG' },\r\n  { Country: 'Mexico', Slug: 'mexico', ISO2: 'MX' },\r\n  {\r\n    Country: 'Saint Pierre and Miquelon',\r\n    Slug: 'saint-pierre-and-miquelon',\r\n    ISO2: 'PM'\r\n  },\r\n  { Country: 'Sierra Leone', Slug: 'sierra-leone', ISO2: 'SL' },\r\n  {\r\n    Country: 'Turks and Caicos Islands',\r\n    Slug: 'turks-and-caicos-islands',\r\n    ISO2: 'TC'\r\n  },\r\n  { Country: 'Bolivia', Slug: 'bolivia', ISO2: 'BO' },\r\n  { Country: 'Greenland', Slug: 'greenland', ISO2: 'GL' },\r\n  { Country: 'United Kingdom', Slug: 'united-kingdom', ISO2: 'GB' },\r\n  { Country: 'Namibia', Slug: 'namibia', ISO2: 'NA' },\r\n  { Country: 'Seychelles', Slug: 'seychelles', ISO2: 'SC' },\r\n  { Country: 'Cook Islands', Slug: 'cook-islands', ISO2: 'CK' },\r\n  { Country: 'Antarctica', Slug: 'antarctica', ISO2: 'AQ' },\r\n  { Country: 'Niue', Slug: 'niue', ISO2: 'NU' },\r\n  { Country: 'Mayotte', Slug: 'mayotte', ISO2: 'YT' },\r\n  {\r\n    Country: 'Micronesia, Federated States of',\r\n    Slug: 'micronesia',\r\n    ISO2: 'FM'\r\n  },\r\n  {\r\n    Country: 'Holy See (Vatican City State)',\r\n    Slug: 'holy-see-vatican-city-state',\r\n    ISO2: 'VA'\r\n  },\r\n  { Country: 'Gibraltar', Slug: 'gibraltar', ISO2: 'GI' },\r\n  { Country: 'Mauritania', Slug: 'mauritania', ISO2: 'MR' },\r\n  { Country: 'Morocco', Slug: 'morocco', ISO2: 'MA' },\r\n  { Country: 'Singapore', Slug: 'singapore', ISO2: 'SG' },\r\n  { Country: 'Switzerland', Slug: 'switzerland', ISO2: 'CH' },\r\n  { Country: 'Faroe Islands', Slug: 'faroe-islands', ISO2: 'FO' },\r\n  { Country: 'Nauru', Slug: 'nauru', ISO2: 'NR' },\r\n  { Country: 'Marshall Islands', Slug: 'marshall-islands', ISO2: 'MH' },\r\n  { Country: 'Montenegro', Slug: 'montenegro', ISO2: 'ME' },\r\n  { Country: 'Cyprus', Slug: 'cyprus', ISO2: 'CY' },\r\n  { Country: 'Lesotho', Slug: 'lesotho', ISO2: 'LS' },\r\n  { Country: 'Mozambique', Slug: 'mozambique', ISO2: 'MZ' },\r\n  { Country: 'Netherlands Antilles', Slug: 'netherlands-antilles', ISO2: 'AN' },\r\n  { Country: 'Pakistan', Slug: 'pakistan', ISO2: 'PK' },\r\n  { Country: 'Palestinian Territory', Slug: 'palestine', ISO2: 'PS' },\r\n  { Country: 'Sweden', Slug: 'sweden', ISO2: 'SE' },\r\n  { Country: 'Brazil', Slug: 'brazil', ISO2: 'BR' },\r\n  { Country: 'Suriname', Slug: 'suriname', ISO2: 'SR' },\r\n  { Country: 'Tokelau', Slug: 'tokelau', ISO2: 'TK' },\r\n  { Country: 'Australia', Slug: 'australia', ISO2: 'AU' },\r\n  { Country: 'Barbados', Slug: 'barbados', ISO2: 'BB' },\r\n  {\r\n    Country: 'Cocos (Keeling) Islands',\r\n    Slug: 'cocos-keeling-islands',\r\n    ISO2: 'CC'\r\n  },\r\n  { Country: 'Libya', Slug: 'libya', ISO2: 'LY' },\r\n  { Country: 'Saint Helena', Slug: 'saint-helena', ISO2: 'SH' },\r\n  { Country: 'Chile', Slug: 'chile', ISO2: 'CL' },\r\n  { Country: 'Haiti', Slug: 'haiti', ISO2: 'HT' },\r\n  {\r\n    Country: 'Svalbard and Jan Mayen Islands',\r\n    Slug: 'svalbard-and-jan-mayen-islands',\r\n    ISO2: 'SJ'\r\n  },\r\n  { Country: 'Poland', Slug: 'poland', ISO2: 'PL' },\r\n  {\r\n    Country: 'Falkland Islands (Malvinas)',\r\n    Slug: 'falkland-islands-malvinas',\r\n    ISO2: 'FK'\r\n  },\r\n  { Country: 'French Guiana', Slug: 'french-guiana', ISO2: 'GF' },\r\n  { Country: 'Honduras', Slug: 'honduras', ISO2: 'HN' },\r\n  { Country: 'Hong Kong, SAR China', Slug: 'hong-kong-sar-china', ISO2: 'HK' },\r\n  { Country: 'Lao PDR', Slug: 'lao-pdr', ISO2: 'LA' },\r\n  { Country: 'Malta', Slug: 'malta', ISO2: 'MT' },\r\n  { Country: 'Dominica', Slug: 'dominica', ISO2: 'DM' },\r\n  { Country: 'Taiwan, Republic of China', Slug: 'taiwan', ISO2: 'TW' },\r\n  { Country: 'Thailand', Slug: 'thailand', ISO2: 'TH' },\r\n  { Country: 'Guatemala', Slug: 'guatemala', ISO2: 'GT' },\r\n  { Country: 'Burundi', Slug: 'burundi', ISO2: 'BI' },\r\n  { Country: 'Belize', Slug: 'belize', ISO2: 'BZ' },\r\n  { Country: 'Canada', Slug: 'canada', ISO2: 'CA' },\r\n  { Country: 'Congo (Kinshasa)', Slug: 'congo-kinshasa', ISO2: 'CD' },\r\n  { Country: 'Bulgaria', Slug: 'bulgaria', ISO2: 'BG' },\r\n  { Country: 'Kenya', Slug: 'kenya', ISO2: 'KE' }\r\n];\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { availableContries } from '../../data';\r\n\r\nconst CountryPicker = ({ selectInputHandler, selectedCountry }) => {\r\n  return (\r\n    <div>\r\n      <div className='form-group form-inline'>\r\n        <select\r\n          defaultValue={selectedCountry}\r\n          className='form-control m-auto'\r\n          onChange={event => selectInputHandler(event)}\r\n        >\r\n          {availableContries.map(country => (\r\n            <option value={country.Country} key={country.Country}>\r\n              {country.Country}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCountryPicker.propTypes = {\r\n  selectInputHandler: PropTypes.func.isRequired,\r\n  selectedCountry: PropTypes.string.isRequired\r\n};\r\nexport default CountryPicker;\r\n","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className='spinner-model'>\r\n      <div className='loader'>Loading...</div>\r\n    </div>\r\n  );\r\n};\r\nexport default Spinner;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Chart from './Components/Chart/Chart';\r\nimport Cards from './Components/Cards/Cards';\r\nimport CountryPicker from './Components/CountryPicker/CountryPicker';\r\n\r\nimport { availableContries } from './data';\r\nimport Spinner from './Components/UI/Spinner';\r\nclass App extends Component {\r\n  state = {\r\n    selectedCountry: 'Morocco',\r\n    selectedCountryLatestData: [],\r\n    selectedCountryDailyData: [],\r\n    loading: false,\r\n    dataNotFound: false\r\n  };\r\n\r\n  getContryData = contryName => {\r\n    //chek if the name of the country is exist in the available_contries that's provided by the API\r\n    // eslint-disable-next-line\r\n    let isExist = availableContries.find(el => el.Country == contryName);\r\n    if (isExist) {\r\n      this.setState({ loading: true });\r\n      this.setState({ dataNotFound: false });\r\n      this.setState({ err: null });\r\n      // connect to the API\r\n      axios\r\n        .get(`/api/data/${isExist.Slug}`)\r\n        .then(res => {\r\n          this.setState({ loading: false });\r\n          //chek if the data array not empty\r\n          if (res.data.length > 0) {\r\n            //set the latest update stats\r\n            this.setState({\r\n              selectedCountryLatestData: res.data[res.data.length - 1]\r\n            });\r\n            //get the daily data\r\n            this.getContryDailyData(isExist.Slug);\r\n          } else {\r\n            // if there is no data\r\n            this.setState({ dataNotFound: true });\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({ dataNotFound: true });\r\n          this.setState({ loading: false });\r\n        });\r\n    }\r\n  };\r\n\r\n  getContryDailyData = contryName => {\r\n    axios.get(`/api/daily_data/${contryName}`).then(res => {\r\n      this.setState({ selectedCountryDailyData: res.data });\r\n    });\r\n    // .catch(err => console.log(err));\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getContryData(this.state.selectedCountry);\r\n  }\r\n  //select input func handler\r\n  selectInputHandler = event => {\r\n    this.setState({ selectedCountry: event.target.value }, () => {\r\n      //setState callback\r\n\r\n      //get contry data every time selectedCountry state update\r\n      this.getContryData(this.state.selectedCountry);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        {this.state.loading ? <Spinner /> : null}\r\n        <h2 className='text-muted text-center display-4 p-4  '>\r\n          COVID-19 stats\r\n        </h2>\r\n        <CountryPicker\r\n          selectedCountry={this.state.selectedCountry}\r\n          selectInputHandler={this.selectInputHandler}\r\n        />\r\n        <Cards\r\n          selectedCountryLatestData={this.state.selectedCountryLatestData}\r\n          dataNotFound={this.state.dataNotFound}\r\n        />\r\n        <Chart\r\n          selectedCountryDailyData={this.state.selectedCountryDailyData}\r\n          dataNotFound={this.state.dataNotFound}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}